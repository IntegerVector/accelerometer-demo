/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)r.hasOwnProperty(e)&&(t[e]=r[e])})(r,e)};function r(r,e){function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function e(t){return"function"==typeof t}var n=!1,s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,n=t},get useDeprecatedSynchronousErrorHandling(){return n}};function i(t){setTimeout((function(){throw t}),0)}var o={closed:!0,next:function(t){},error:function(t){if(s.useDeprecatedSynchronousErrorHandling)throw t;i(t)},complete:function(){}},c=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}(),u=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,r){return r+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),h=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var r;if(!this.closed){var n,s=this,i=s._parentOrParents,o=s._ctorUnsubscribe,h=s._unsubscribe,p=s._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof t)i.remove(this);else if(null!==i)for(var l=0;l<i.length;++l)i[l].remove(this);if(e(h)){o&&(this._unsubscribe=void 0);try{h.call(this)}catch(t){r=t instanceof u?a(t.errors):[t]}}if(c(p)){l=-1;for(var b=p.length;++l<b;){var f=p[l];if(null!==(n=f)&&"object"==typeof n)try{f.unsubscribe()}catch(t){r=r||[],t instanceof u?r=r.concat(a(t.errors)):r.push(t)}}}if(r)throw new u(r)}},t.prototype.add=function(r){var e=r;if(!r)return t.EMPTY;switch(typeof r){case"function":e=new t(r);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var n=e;(e=new t)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+r+" added to Subscription.")}var s=e._parentOrParents;if(null===s)e._parentOrParents=this;else if(s instanceof t){if(s===this)return e;e._parentOrParents=[s,this]}else{if(-1!==s.indexOf(this))return e;s.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[e]:i.push(e),e},t.prototype.remove=function(t){var r=this._subscriptions;if(r){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function a(t){return t.reduce((function(t,r){return t.concat(r instanceof u?r.errors:r)}),[])}var p=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),l=function(t){function e(r,n,s){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=o;break;case 1:if(!r){i.destination=o;break}if("object"==typeof r){r instanceof e?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new b(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new b(i,r,n,s)}return i}return r(e,t),e.prototype[p]=function(){return this},e.create=function(t,r,n){var s=new e(t,r,n);return s.syncErrorThrowable=!1,s},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(h),b=function(t){function n(r,n,s,i){var c,u=t.call(this)||this;u._parentSubscriber=r;var h=u;return e(n)?c=n:n&&(c=n.next,s=n.error,i=n.complete,n!==o&&(e((h=Object.create(n)).unsubscribe)&&u.add(h.unsubscribe.bind(h)),h.unsubscribe=u.unsubscribe.bind(u))),u._context=h,u._next=c,u._error=s,u._complete=i,u}return r(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var r=this._parentSubscriber;s.useDeprecatedSynchronousErrorHandling&&r.syncErrorThrowable?this.__tryOrSetError(r,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var r=this._parentSubscriber,e=s.useDeprecatedSynchronousErrorHandling;if(this._error)e&&r.syncErrorThrowable?(this.__tryOrSetError(r,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(r.syncErrorThrowable)e?(r.syncErrorValue=t,r.syncErrorThrown=!0):i(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;i(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var r=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};s.useDeprecatedSynchronousErrorHandling&&r.syncErrorThrowable?(this.__tryOrSetError(r,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,r){try{t.call(this._context,r)}catch(t){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw t;i(t)}},n.prototype.__tryOrSetError=function(t,r,e){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{r.call(this._context,e)}catch(r){return s.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=r,t.syncErrorThrown=!0,!0):(i(r),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(l),f=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function d(t){return t}function _(t){return 0===t.length?d:1===t.length?t[0]:function(r){return t.reduce((function(t,r){return r(t)}),r)}}var y=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(r){var e=new t;return e.source=this,e.operator=r,e},t.prototype.subscribe=function(t,r,e){var n=this.operator,i=function(t,r,e){if(t){if(t instanceof l)return t;if(t[p])return t[p]()}return t||r||e?new l(t,r,e):new l(o)}(t,r,e);if(n?i.add(n.call(i,this.source)):i.add(this.source||s.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),s.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(r){s.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=r),function(t){for(;t;){var r=t,e=r.closed,n=r.destination,s=r.isStopped;if(e||s)return!1;t=n&&n instanceof l?n:null}return!0}(t)?t.error(r):console.warn(r)}},t.prototype.forEach=function(t,r){var e=this;return new(r=w(r))((function(r,n){var s;s=e.subscribe((function(r){try{t(r)}catch(t){n(t),s&&s.unsubscribe()}}),n,r)}))},t.prototype._subscribe=function(t){var r=this.source;return r&&r.subscribe(t)},t.prototype[f]=function(){return this},t.prototype.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return 0===t.length?this:_(t)(this)},t.prototype.toPromise=function(t){var r=this;return new(t=w(t))((function(t,e){var n;r.subscribe((function(t){return n=t}),(function(t){return e(t)}),(function(){return t(n)}))}))},t.create=function(r){return new t(r)},t}();function w(t){if(t||(t=s.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var v=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),E=function(t){function e(r,e){var n=t.call(this)||this;return n.subject=r,n.subscriber=e,n.closed=!1,n}return r(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,r=t.observers;if(this.subject=null,r&&0!==r.length&&!t.isStopped&&!t.closed){var e=r.indexOf(this.subscriber);-1!==e&&r.splice(e,1)}}},e}(h),m=function(t){function e(r){var e=t.call(this,r)||this;return e.destination=r,e}return r(e,t),e}(l),x=function(t){function e(){var r=t.call(this)||this;return r.observers=[],r.closed=!1,r.isStopped=!1,r.hasError=!1,r.thrownError=null,r}return r(e,t),e.prototype[p]=function(){return new m(this)},e.prototype.lift=function(t){var r=new S(this,this);return r.operator=t,r},e.prototype.next=function(t){if(this.closed)throw new v;if(!this.isStopped)for(var r=this.observers,e=r.length,n=r.slice(),s=0;s<e;s++)n[s].next(t)},e.prototype.error=function(t){if(this.closed)throw new v;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var r=this.observers,e=r.length,n=r.slice(),s=0;s<e;s++)n[s].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new v;this.isStopped=!0;for(var t=this.observers,r=t.length,e=t.slice(),n=0;n<r;n++)e[n].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(r){if(this.closed)throw new v;return t.prototype._trySubscribe.call(this,r)},e.prototype._subscribe=function(t){if(this.closed)throw new v;return this.hasError?(t.error(this.thrownError),h.EMPTY):this.isStopped?(t.complete(),h.EMPTY):(this.observers.push(t),new E(this,t))},e.prototype.asObservable=function(){var t=new y;return t.source=this,t},e.create=function(t,r){return new S(t,r)},e}(y),S=function(t){function e(r,e){var n=t.call(this)||this;return n.destination=r,n.source=e,n}return r(e,t),e.prototype.next=function(t){var r=this.destination;r&&r.next&&r.next(t)},e.prototype.error=function(t){var r=this.destination;r&&r.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):h.EMPTY},e}(x);class g{constructor(t){this.onError=new x,this._change=new x,"function"==typeof Accelerometer?(this._acl=new Accelerometer(t),this._acl.addEventListener("error",(t=>{"NotAllowedError"===t.error.name?this.onError.next("Application not allowed to use accelerometer"):"NotReadableError"===t.error.name&&this.onError.next("Accelerometer sensor unreachable")})),this._acl.addEventListener("reading",(()=>{this._change.next({x:this._acl.x,y:this._acl.y,z:this._acl.z})}))):this.onError.next("This devise doesn't have accelerometer, or it's unreachable"),this.update={subscribe:this._change.subscribe.bind(this._change),unsubscribe:this._change.unsubscribe.bind(this._change)}}start(){this._acl.start()}stop(){this._acl.stop(),this._change.unsubscribe()}}class T{constructor(t){this._mainText=document.createElement("p"),this._element=document.getElementById(t),this._element.appendChild(this._mainText)}setMainText(t){this._mainText.textContent=t}addChildText(t){!async function(t){fetch("log",{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({text:t})})}(t);const r=document.createElement("p");r.textContent=t,this._element.appendChild(r)}}class O{constructor(t){this._element=document.getElementById(t),this._w=Math.round(this._element.width/5),this._h=Math.round(this._element.height/5),this._sw=this._element.width-this._w,this._sh=this._element.height-this._h,this._x=0,this._y=0,this._dx=0,this._dy=0,this._element.getContext&&(this._ctx=this._element.getContext("2d"),this._ctx.fillStyle="#ff7373",setInterval(this._draw.bind(this),5))}setPosition(t){this._dx=-t.x,this._dy=t.y}_draw(){this._ctx.clearRect(0,0,this._element.width,this._element.height),this._x+=this._dx,this._y+=this._dy,this._x<0&&(this._x=0),this._x>this._sw&&(this._x=this._sw),this._y<0&&(this._y=0),this._y>this._sh&&(this._y=this._sh),this._ctx.fillRect(this._x,this._y,this._w,this._h)}}!async function(){const t=new T("display-text"),r=new O("target");if("granted"!==(await async function(){return async function(t){return navigator.permissions.query({name:"accelerometer"})}()}()).state)return void t.addChildText("Application not allowed to use accelerometer");const e=new g({frequency:10});e.onError.subscribe((r=>{t.addChildText(r)})),e.update.subscribe((({x:e,y:n,z:s})=>{r.setPosition({x:e,y:n,z:s}),t.setMainText(`X:${e} Y:${n} Z:${s}`)})),e.start(),t.addChildText("Client application ready")}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,